{"ast":null,"code":"import axios from \"../../api\";\nimport { toast } from \"react-toastify\";\nexport const LoginUser = values => async dispatch => {\n  try {\n    dispatch({\n      type: \"LOGIN_REQUEST_INIT\"\n    });\n    const {\n      email,\n      password\n    } = values;\n    const response = await axios.post(\"/users/login\", {\n      email,\n      password\n    });\n\n    if (response.status === 200) {\n      localStorage.setItem(\"blog-access-token\", response.data.token);\n      localStorage.setItem(\"blog-user\", JSON.stringify(response.data));\n      toast.success(\"Login Successfull\");\n      dispatch({\n        type: \"LOGIN_REQUEST_SUCCESS\",\n        payload: response.data\n      });\n    } else {\n      dispatch({\n        type: \"LOGIN_REQUEST_FAILED\",\n        payload: response.data\n      });\n      toast.error(\"Invalid Credentials\");\n    }\n  } catch (error) {\n    toast.error(\"Invalid Credentials\");\n    dispatch({\n      type: \"LOGIN_REQUEST_FAILED\",\n      payload: error\n    });\n  }\n};\nexport const RegisterUser = values => async dispatch => {\n  try {\n    dispatch({\n      type: \"LOGIN_REQUEST_INIT\"\n    });\n    const {\n      email,\n      password,\n      name,\n      profilePicture\n    } = values;\n    const {\n      data\n    } = await axios.post(\"/users/register\", {\n      email,\n      password,\n      name,\n      profilePicture\n    });\n    localStorage.setItem(\"blog-access-token\", data.token);\n    localStorage.setItem(\"blog-user\", JSON.stringify(data));\n    toast.success(\"Welcome!!!\");\n    dispatch({\n      type: \"REGISTER_REQUEST_SUCCESS\",\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: \"LOGIN_REQUEST_FAILED\",\n      payload: error\n    });\n  }\n};\nexport const LogOut = () => async dispatch => {\n  try {\n    dispatch({\n      type: \"LOGOUT_REQUEST\"\n    });\n    localStorage.clear();\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["axios","toast","LoginUser","values","dispatch","type","email","password","response","post","status","localStorage","setItem","data","token","JSON","stringify","success","payload","error","RegisterUser","name","profilePicture","LogOut","clear","console","log"],"sources":["C:/Users/DELL/Downloads/Blog---Frontend-master/Blog---Frontend-master/src/redux/actions/UserAction.js"],"sourcesContent":["import axios from \"../../api\";\nimport { toast } from \"react-toastify\";\n\nexport const LoginUser = (values) => async (dispatch) => {\n  try {\n    dispatch({ type: \"LOGIN_REQUEST_INIT\" });\n    const { email, password } = values;\n    const response = await axios.post(\"/users/login\", { email, password });\n\n    if (response.status === 200) {\n      localStorage.setItem(\"blog-access-token\", response.data.token);\n      localStorage.setItem(\"blog-user\", JSON.stringify(response.data));\n      toast.success(\"Login Successfull\");\n      dispatch({ type: \"LOGIN_REQUEST_SUCCESS\", payload: response.data });\n    } else {\n      dispatch({ type: \"LOGIN_REQUEST_FAILED\", payload: response.data });\n      toast.error(\"Invalid Credentials\");\n    }\n  } catch (error) {\n    toast.error(\"Invalid Credentials\");\n    dispatch({ type: \"LOGIN_REQUEST_FAILED\", payload: error });\n  }\n};\n\nexport const RegisterUser = (values) => async (dispatch) => {\n  try {\n    dispatch({ type: \"LOGIN_REQUEST_INIT\" });\n    const { email, password, name, profilePicture } = values;\n    const { data } = await axios.post(\"/users/register\", {\n      email,\n      password,\n      name,\n      profilePicture,\n    });\n\n    localStorage.setItem(\"blog-access-token\", data.token);\n    localStorage.setItem(\"blog-user\", JSON.stringify(data));\n    toast.success(\"Welcome!!!\");\n\n    dispatch({ type: \"REGISTER_REQUEST_SUCCESS\", payload: data });\n  } catch (error) {\n    dispatch({ type: \"LOGIN_REQUEST_FAILED\", payload: error });\n  }\n};\n\nexport const LogOut = () => async (dispatch) => {\n  try {\n    dispatch({ type: \"LOGOUT_REQUEST\" });\n    localStorage.clear();\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,WAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAO,MAAMC,SAAS,GAAIC,MAAD,IAAY,MAAOC,QAAP,IAAoB;EACvD,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAE;IAAR,CAAD,CAAR;IACA,MAAM;MAAEC,KAAF;MAASC;IAAT,IAAsBJ,MAA5B;IACA,MAAMK,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAN,CAAW,cAAX,EAA2B;MAAEH,KAAF;MAASC;IAAT,CAA3B,CAAvB;;IAEA,IAAIC,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;MAC3BC,YAAY,CAACC,OAAb,CAAqB,mBAArB,EAA0CJ,QAAQ,CAACK,IAAT,CAAcC,KAAxD;MACAH,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCG,IAAI,CAACC,SAAL,CAAeR,QAAQ,CAACK,IAAxB,CAAlC;MACAZ,KAAK,CAACgB,OAAN,CAAc,mBAAd;MACAb,QAAQ,CAAC;QAAEC,IAAI,EAAE,uBAAR;QAAiCa,OAAO,EAAEV,QAAQ,CAACK;MAAnD,CAAD,CAAR;IACD,CALD,MAKO;MACLT,QAAQ,CAAC;QAAEC,IAAI,EAAE,sBAAR;QAAgCa,OAAO,EAAEV,QAAQ,CAACK;MAAlD,CAAD,CAAR;MACAZ,KAAK,CAACkB,KAAN,CAAY,qBAAZ;IACD;EACF,CAdD,CAcE,OAAOA,KAAP,EAAc;IACdlB,KAAK,CAACkB,KAAN,CAAY,qBAAZ;IACAf,QAAQ,CAAC;MAAEC,IAAI,EAAE,sBAAR;MAAgCa,OAAO,EAAEC;IAAzC,CAAD,CAAR;EACD;AACF,CAnBM;AAqBP,OAAO,MAAMC,YAAY,GAAIjB,MAAD,IAAY,MAAOC,QAAP,IAAoB;EAC1D,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAE;IAAR,CAAD,CAAR;IACA,MAAM;MAAEC,KAAF;MAASC,QAAT;MAAmBc,IAAnB;MAAyBC;IAAzB,IAA4CnB,MAAlD;IACA,MAAM;MAAEU;IAAF,IAAW,MAAMb,KAAK,CAACS,IAAN,CAAW,iBAAX,EAA8B;MACnDH,KADmD;MAEnDC,QAFmD;MAGnDc,IAHmD;MAInDC;IAJmD,CAA9B,CAAvB;IAOAX,YAAY,CAACC,OAAb,CAAqB,mBAArB,EAA0CC,IAAI,CAACC,KAA/C;IACAH,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCG,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAlC;IACAZ,KAAK,CAACgB,OAAN,CAAc,YAAd;IAEAb,QAAQ,CAAC;MAAEC,IAAI,EAAE,0BAAR;MAAoCa,OAAO,EAAEL;IAA7C,CAAD,CAAR;EACD,CAfD,CAeE,OAAOM,KAAP,EAAc;IACdf,QAAQ,CAAC;MAAEC,IAAI,EAAE,sBAAR;MAAgCa,OAAO,EAAEC;IAAzC,CAAD,CAAR;EACD;AACF,CAnBM;AAqBP,OAAO,MAAMI,MAAM,GAAG,MAAM,MAAOnB,QAAP,IAAoB;EAC9C,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAE;IAAR,CAAD,CAAR;IACAM,YAAY,CAACa,KAAb;EACD,CAHD,CAGE,OAAOL,KAAP,EAAc;IACdM,OAAO,CAACC,GAAR,CAAYP,KAAZ;EACD;AACF,CAPM"},"metadata":{},"sourceType":"module"}